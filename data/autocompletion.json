{
  "global":
  [
    {
      "text": "string",
      "type": "package"
    },
    {
      "text": "table",
      "type": "package"
    },
    {
      "text": "math",
      "type": "package"
    },
    {
      "text": "coroutine",
      "type": "package"
    },
    {
      "text": "io",
      "type": "package"
    },
    {
      "text": "os",
      "type": "package"
    },
    {
      "text": "debug",
      "type": "package"
    },
    {
      "text": "package",
      "type": "package"
    },
    {
      "text": "bit",
      "type": "package"
    },
    {
      "text": "jit",
      "type": "package"
    },
    {
      "text": "ffi",
      "type": "package"
    },
    {
      "text": "assert",
      "type": "function",
      "snippet": "assert(${1:v}, ${2:[message]})"
    },
    {
      "text": "collectgarbage",
      "type": "function",
      "snippet": "collectgarbage(${1:[opt]}, ${2:[arg]})"
    },
    {
      "text": "dofile",
      "type": "function",
      "snippet": "dofile(${1:[filename]})"
    },
    {
      "text": "error",
      "type": "function",
      "snippet": "error(${1:message}, ${2:[level]})"
    },
    {
      "text": "getfenv",
      "type": "function",
      "snippet": "getfenv(${1:[f]})"
    },
    {
      "text": "getmetatable",
      "type": "function",
      "snippet": "getmetatable(${1:object})"
    },
    {
      "text": "ipairs",
      "type": "function",
      "snippet": "ipairs(${1:t})"
    },
    {
      "text": "load",
      "type": "function",
      "snippet": "load(${1:ld}, ${2:[source]}, ${3:[mode]}, ${4:[env]})"
    },
    {
      "text": "loadfile",
      "type": "function",
      "snippet": "loadfile(${1:[filename]}, ${2:[mode]}, ${3:[env]})"
    },
    {
      "text": "loadstring",
      "type": "function",
      "snippet": "loadstring(${1:ld}, ${2:[source]}, ${3:[mode]}, ${4:[env]})"
    },
    {
      "text": "module",
      "type": "function",
      "snippet": "module(${1:name})"
    },
    {
      "text": "next",
      "type": "function",
      "snippet": "next(${1:table}, ${2:[index]})"
    },
    {
      "text": "pairs",
      "type": "function",
      "snippet": "pairs(${1:t})"
    },
    {
      "text": "pcall",
      "type": "function",
      "snippet": "pcall(${1:f}, ${2:arg1})"
    },
    {
      "text": "print",
      "type": "function",
      "snippet": "print(${1:v})"
    },
    {
      "text": "rawequal",
      "type": "function",
      "snippet": "rawequal(${1:v1}, ${2:v2})"
    },
    {
      "text": "rawget",
      "type": "function",
      "snippet": "rawget(${1:table}, ${2:index})"
    },
    {
      "text": "rawlen",
      "type": "function",
      "snippet": "rawlen(${1:v})"
    },
    {
      "text": "rawset",
      "type": "function",
      "snippet": "rawset(${1:table}, ${2:index}, ${3:value})"
    },
    {
      "text": "require",
      "type": "function",
      "snippet": "require(${1:modname})"
    },
    {
      "text": "select",
      "type": "function",
      "snippet": "select(${1:index}, ${2:...})"
    },
    {
      "text": "setfenv",
      "type": "function",
      "snippet": "setfenv(${1:f}, ${2:table})"
    },
    {
      "text": "setmetatable",
      "type": "function",
      "snippet": "setmetatable(${1:table}, ${2:metatable})"
    },
    {
      "text": "tonumber",
      "type": "function",
      "snippet": "tonumber(${1:e}, ${2:[base]})"
    },
    {
      "text": "tostring",
      "type": "function",
      "snippet": "tostring(${1:e})"
    },
    {
      "text": "type",
      "type": "function",
      "snippet": "type(${1:v})"
    },
    {
      "text": "unpack",
      "type": "function",
      "snippet": "unpack(${1:list}, ${2:[i]}, ${3:[j]})"
    },
    {
      "text": "xpcall",
      "type": "function",
      "snippet": "xpcall(${1:f}, ${2:err})"
    },
    {
      "text": "gcinfo",
      "type": "function",
      "snippet": "gcinfo()"
    },
    {
      "text": "newproxy",
      "type": "function",
      "snippet": "newproxy(${1:[mt]})"
    },
    {
      "text": "_G",
      "type": "constant"
    },
    {
      "text": "_VERSION",
      "type": "constant"
    },

    {
      "text": "__index",
      "type": "method"
    },
    {
      "text": "__newindex",
      "type": "method"
    },
    {
      "text": "__call",
      "type": "method"
    },
    {
      "text": "__add",
      "type": "method"
    },
    {
      "text": "__sub",
      "type": "method"
    },
    {
      "text": "__mul",
      "type": "method"
    },
    {
      "text": "__div",
      "type": "method"
    },
    {
      "text": "__mod",
      "type": "method"
    },
    {
      "text": "__pow",
      "type": "method"
    },
    {
      "text": "__unm",
      "type": "method"
    },
    {
      "text": "__concat",
      "type": "method"
    },
    {
      "text": "__len",
      "type": "method"
    },
    {
      "text": "__eq",
      "type": "method"
    },
    {
      "text": "__lt",
      "type": "method"
    },
    {
      "text": "__le",
      "type": "method"
    },
    {
      "text": "__gc",
      "type": "method"
    },
    {
      "text": "__mode",
      "type": "method"
    }
  ],
  "keywords":
  [
    {
      "text": "and",
      "type": "keyword"
    },
    {
      "text": "break",
      "type": "keyword"
    },
    {
      "text": "else",
      "type": "keyword"
    },
    {
      "text": "elseif",
      "type": "keyword"
    },
    {
      "text": "end",
      "type": "keyword"
    },
    {
      "text": "for",
      "type": "keyword"
    },
    {
      "text": "function",
      "type": "keyword"
    },
    {
      "text": "goto",
      "type": "keyword"
    },
    {
      "text": "local",
      "type": "keyword"
    },
    {
      "text": "not",
      "type": "keyword"
    },
    {
      "text": "repeat",
      "type": "keyword"
    },
    {
      "text": "return",
      "type": "keyword"
    },
    {
      "text": "then",
      "type": "keyword"
    },
    {
      "text": "until",
      "type": "keyword"
    },
    {
      "text": "while",
      "type": "keyword"
    },
    {
      "text": "false",
      "type": "constant"
    },
    {
      "text": "true",
      "type": "constant"
    },
    {
      "text": "nil",
      "type": "constant"
    }
  ],
  "libraries":
  {
    "string":
    [
      {
        "text": "find",
        "type": "function",
        "snippet": "find(${1:s}, ${2:pattern}, ${3:[init]}, ${4:[plain]})"
      },
      {
        "text": "format",
        "type": "function",
        "snippet": "format(${1:str}, ${2:...})"
      },
      {
        "text": "rep",
        "type": "function",
        "snippet": "rep(${1:s}, ${2:n}, ${3:[sep]})"
      },
      {
        "text": "gsub",
        "type": "function",
        "snippet": "gsub(${1:s}, ${2:pattern}, ${3:repl}, ${4:[n]})"
      },
      {
        "text": "len",
        "type": "function",
        "snippet": "len(${1:s})"
      },
      {
        "text": "gmatch",
        "type": "function",
        "snippet": "gmatch(${1:s}, ${2:pattern})"
      },
      {
        "text": "dump",
        "type": "function",
        "snippet": "dump(${1:function})"
      },
      {
        "text": "match",
        "type": "function",
        "snippet": "match(${1:s}, ${2:pattern}, ${3:[init]})"
      },
      {
        "text": "reverse",
        "type": "function",
        "snippet": "reverse(${1:s})"
      },
      {
        "text": "byte",
        "type": "function",
        "snippet": "byte(${1:s}, ${2:[i]}, ${3:[j]})"
      },
      {
        "text": "char",
        "type": "function",
        "snippet": "char(${1:...})"
      },
      {
        "text": "upper",
        "type": "function",
        "snippet": "upper(${1:s})"
      },
      {
        "text": "lower",
        "type": "function",
        "snippet": "lower(${1:s})"
      },
      {
        "text": "sub",
        "type": "function",
        "snippet": "sub(${1:s}, ${2:i}, ${3:[j]})"
      }
    ],
    "table":
    [
      {
        "text": "maxn",
        "type": "function",
        "snippet": "maxn(${1:table})"
      },
      {
        "text": "sort",
        "type": "function",
        "snippet": "sort(${1:table}, ${2:[comp]})"
      },
      {
        "text": "pack",
        "type": "function",
        "snippet": "pack(${1:...})"
      },
      {
        "text": "remove",
        "type": "function",
        "snippet": "remove(${1:table}, ${2:[pos]})"
      },
      {
        "text": "unpack",
        "type": "function",
        "snippet": "unpack(${1:table}, ${2:[i]}, ${3:[j]})"
      },
      {
        "text": "concat",
        "type": "function",
        "snippet": "concat(${1:table}, ${2:[sep]}, ${3:[i]}, ${4:[j]})"
      },
      {
        "text": "insert",
        "type": "function",
        "snippet": "insert(${1:table}, ${2:[pos]}, ${3:value})"
      },
      {
        "text": "foreach",
        "type": "function",
        "snippet": "foreach(${1:table}, ${2:f})"
      },
      {
        "text": "foreachi",
        "type": "function",
        "snippet": "foreachi(${1:table}, ${2:f})"
      },
      {
        "text": "getn",
        "type": "function",
        "snippet": "getn(${1:table})"
      }
    ],
    "math":
    [
      {
        "text": "huge",
        "type": "constant"
      },
      {
        "text": "pi",
        "type": "constant"
      },
      {
        "text": "ceil",
        "type": "function",
        "snippet": "ceil(${1:x})"
      },
      {
        "text": "tan",
        "type": "function",
        "snippet": "tan(${1:x})"
      },
      {
        "text": "log10",
        "type": "function",
        "snippet": "log10(${1:x})"
      },
      {
        "text": "randomseed",
        "type": "function",
        "snippet": "randomseed(${1:x})"
      },
      {
        "text": "cos",
        "type": "function",
        "snippet": "cos(${1:x})"
      },
      {
        "text": "sinh",
        "type": "function",
        "snippet": "sinh(${1:x})"
      },
      {
        "text": "random",
        "type": "function",
        "snippet": "random(${1:[m]}, ${2:[n]})"
      },
      {
        "text": "max",
        "type": "function",
        "snippet": "max(${1:x}, ${2:...})"
      },
      {
        "text": "atan2",
        "type": "function",
        "snippet": "atan2(${1:y}, ${2:x})"
      },
      {
        "text": "ldexp",
        "type": "function",
        "snippet": "ldexp(${1:m}, ${2:e})"
      },
      {
        "text": "floor",
        "type": "function",
        "snippet": "floor(${1:x})"
      },
      {
        "text": "sqrt",
        "type": "function",
        "snippet": "sqrt(${1:x})"
      },
      {
        "text": "deg",
        "type": "function",
        "snippet": "deg(${1:x})"
      },
      {
        "text": "atan",
        "type": "function",
        "snippet": "atan(${1:x})"
      },
      {
        "text": "fmod",
        "type": "function",
        "snippet": "fmod(${1:x}, ${2:y})"
      },
      {
        "text": "acos",
        "type": "function",
        "snippet": "acos(${1:x})"
      },
      {
        "text": "pow",
        "type": "function",
        "snippet": "pow(${1:x}, ${2:y})"
      },
      {
        "text": "abs",
        "type": "function",
        "snippet": "abs(${1:x})"
      },
      {
        "text": "min",
        "type": "function",
        "snippet": "min(${1:x}, ${2:...})"
      },
      {
        "text": "log",
        "type": "function",
        "snippet": "log(${1:x}, ${2:[base]})"
      },
      {
        "text": "frexp",
        "type": "function",
        "snippet": "frexp(${1:x})"
      },
      {
        "text": "sin",
        "type": "function",
        "snippet": "sin(${1:x})"
      },
      {
        "text": "tanh",
        "type": "function",
        "snippet": "tanh(${1:x})"
      },
      {
        "text": "exp",
        "type": "function",
        "snippet": "exp(${1:x})"
      },
      {
        "text": "modf",
        "type": "function",
        "snippet": "modf(${1:x})"
      },
      {
        "text": "cosh",
        "type": "function",
        "snippet": "cosh(${1:x})"
      },
      {
        "text": "asin",
        "type": "function",
        "snippet": "asin(${1:x})"
      },
      {
        "text": "rad",
        "type": "function",
        "snippet": "rad(${1:x})"
      }
    ],
    "coroutine":
    [
      {
        "text": "yield",
        "type": "function",
        "snippet": "yield(${1:...})"
      },
      {
        "text": "wrap",
        "type": "function",
        "snippet": "wrap(${1:f})"
      },
      {
        "text": "create",
        "type": "function",
        "snippet": "create(${1:f})"
      },
      {
        "text": "status",
        "type": "function",
        "snippet": "status(${1:co})"
      },
      {
        "text": "resume",
        "type": "function",
        "snippet": "resume(${1:co}, ${2:[val1, ...]})"
      },
      {
        "text": "running",
        "type": "function",
        "snippet": "running()"
      }
    ],
    "io":
    [
      {
        "text": "stdin",
        "type": "variable"
      },
      {
        "text": "stdout",
        "type": "variable"
      },
      {
        "text": "stderr",
        "type": "variable"
      },
      {
        "text": "input",
        "type": "function",
        "snippet": "input(${1:[file]})"
      },
      {
        "text": "tmpfile",
        "type": "function",
        "snippet": "tmpfile()"
      },
      {
        "text": "output",
        "type": "function",
        "snippet": "output(${1:[file]})"
      },
      {
        "text": "open",
        "type": "function",
        "snippet": "open(${1:filename}, ${2:[mode]})"
      },
      {
        "text": "popen",
        "type": "function",
        "snippet": "popen(${1:prog}, ${2:[mode]})"
      },
      {
        "text": "type",
        "type": "function",
        "snippet": "type(${1:obj})"
      },
      {
        "text": "read",
        "type": "function",
        "snippet": "read(${1:...})"
      },
      {
        "text": "close",
        "type": "function",
        "snippet": "close(${1:[file]})"
      },
      {
        "text": "write",
        "type": "function",
        "snippet": "write(${1:...})"
      },
      {
        "text": "flush",
        "type": "function",
        "snippet": "flush()"
      },
      {
        "text": "lines",
        "type": "function",
        "snippet": "lines(${1:[filename]})"
      }
    ],
    "os":
    [
      {
        "text": "execute",
        "type": "function",
        "snippet": "execute(${1:[command]})"
      },
      {
        "text": "rename",
        "type": "function",
        "snippet": "rename(${1:oldname}, ${2:newname})"
      },
      {
        "text": "setlocale",
        "type": "function",
        "snippet": "setlocale(${1:locale}, ${2:[category]})"
      },
      {
        "text": "getenv",
        "type": "function",
        "snippet": "getenv(${1:varname})"
      },
      {
        "text": "difftime",
        "type": "function",
        "snippet": "difftime(${1:t2}, ${2:t1})"
      },
      {
        "text": "remove",
        "type": "function",
        "snippet": "remove(${1:filename})"
      },
      {
        "text": "date",
        "type": "function",
        "snippet": "date(${1:[format]}, ${2:[time]})"
      },
      {
        "text": "exit",
        "type": "function",
        "snippet": "exit(${1:[code]})"
      },
      {
        "text": "time",
        "type": "function",
        "snippet": "time(${1:[table]})"
      },
      {
        "text": "clock",
        "type": "function",
        "snippet": "clock()"
      },
      {
        "text": "tmpname",
        "type": "function",
        "snippet": "tmpname()"
      }
    ],
    "debug":
    [
      {
        "text": "setupvalue",
        "type": "function",
        "snippet": "setupvalue(${1:func}, ${2:up}, ${3:value})"
      },
      {
        "text": "getregistry",
        "type": "function",
        "snippet": "getregistry()"
      },
      {
        "text": "traceback",
        "type": "function",
        "snippet": "traceback(${1:[thread]}, ${2:[message]}, ${3:[level]})"
      },
      {
        "text": "setlocal",
        "type": "function",
        "snippet": "setlocal(${1:[thread]}, ${2:level}, ${3:local}, ${4:value})"
      },
      {
        "text": "getupvalue",
        "type": "function",
        "snippet": "getupvalue(${1:func}, ${2:up})"
      },
      {
        "text": "gethook",
        "type": "function",
        "snippet": "gethook(${1:[thread]})"
      },
      {
        "text": "sethook",
        "type": "function",
        "snippet": "sethook(${1:[thread]}, ${2:hook}, ${3:mask}, ${4:[count]})"
      },
      {
        "text": "getlocal",
        "type": "function",
        "snippet": "getlocal(${1:[thread]}, ${2:f}, ${3:local})"
      },
      {
        "text": "upvaluejoin",
        "type": "function",
        "snippet": "upvaluejoin(${1:f1}, ${2:n1}, ${3:f2}, ${4:n2})"
      },
      {
        "text": "getinfo",
        "type": "function",
        "snippet": "getinfo(${1:[thread]}, ${2:function}, ${3:[what]})"
      },
      {
        "text": "getfenv",
        "type": "function",
        "snippet": "getfenv(${1:o})"
      },
      {
        "text": "setmetatable",
        "type": "function",
        "snippet": "setmetatable(${1:object}, ${2:table})"
      },
      {
        "text": "upvalueid",
        "type": "function",
        "snippet": "upvalueid(${1:f}, ${2:n})"
      },
      {
        "text": "getuservalue",
        "type": "function",
        "snippet": "getuservalue(${1:u})"
      },
      {
        "text": "debug",
        "type": "function",
        "snippet": "debug()"
      },
      {
        "text": "getmetatable",
        "type": "function",
        "snippet": "getmetatable(${1:object})"
      },
      {
        "text": "setfenv",
        "type": "function",
        "snippet": "setfenv(${1:object}, ${2:table})"
      },
      {
        "text": "setuservalue",
        "type": "function",
        "snippet": "setuservalue(${1:udata}, ${2:value})"
      }
    ],
    "package":
    [
      {
        "text": "preload",
        "type": "variable"
      },
      {
        "text": "path",
        "type": "variable"
      },
      {
        "text": "loaded",
        "type": "variable"
      },
      {
        "text": "cpath",
        "type": "variable"
      },
      {
        "text": "loaders",
        "type": "variable"
      },
      {
        "text": "config",
        "type": "variable"
      },
      {
        "text": "seeall",
        "type": "function",
        "snippet": "seeall(${1:module})"
      },
      {
        "text": "loadlib",
        "type": "function",
        "snippet": "loadlib(${1:libname}, ${2:funcname})"
      },
      {
        "text": "searchpath",
        "type": "function",
        "snippet": "searchpath(${1:name}, ${2:path}, ${3:[sep]}, ${4:[rep]})"
      }
    ],
    "bit":
    [
      {
        "text": "rol",
        "type": "function",
        "snippet": "rol(${1:x}, ${2:n})"
      },
      {
        "text": "rshift",
        "type": "function",
        "snippet": "rshift(${1:x}, ${2:n})"
      },
      {
        "text": "ror",
        "type": "function",
        "snippet": "ror(${1:x}, ${2:n})"
      },
      {
        "text": "bswap",
        "type": "function",
        "snippet": "bswap(${1:x})"
      },
      {
        "text": "bxor",
        "type": "function",
        "snippet": "bxor(${1:x1}, ${2:[x2, ...]})"
      },
      {
        "text": "bor",
        "type": "function",
        "snippet": "bor(${1:x1}, ${2:[x2, ...]})"
      },
      {
        "text": "arshift",
        "type": "function",
        "snippet": "arshift(${1:x}, ${2:n})"
      },
      {
        "text": "bnot",
        "type": "function",
        "snippet": "bnot(${1:x})"
      },
      {
        "text": "tobit",
        "type": "function",
        "snippet": "tobit(${1:x})"
      },
      {
        "text": "lshift",
        "type": "function",
        "snippet": "lshift(${1:x}, ${2:n})"
      },
      {
        "text": "tohex",
        "type": "function",
        "snippet": "tohex(${1:x}, ${2:[n]})"
      },
      {
        "text": "band",
        "type": "function",
        "snippet": "band(${1:x1}, ${2:[x2, ...]})"
      }
    ],
    "jit":
    [
      {
        "text": "arch",
        "type": "variable"
      },
      {
        "text": "version",
        "type": "variable"
      },
      {
        "text": "version_num",
        "type": "variable"
      },
      {
        "text": "util",
        "type": "variable"
      },
      {
        "text": "opt",
        "type": "variable"
      },
      {
        "text": "os",
        "type": "variable"
      },
      {
        "text": "status",
        "type": "function",
        "snippet": "status()"
      },
      {
        "text": "on",
        "type": "function",
        "snippet": "on()"
      },
      {
        "text": "off",
        "type": "function",
        "snippet": "off()"
      },
      {
        "text": "flush",
        "type": "function",
        "snippet": "flush(${1:[tr]})"
      },
      {
        "text": "attach",
        "type": "function",
        "snippet": "attach(${1:cb}, ${2:ev})"
      }
    ],
    "ffi":
    [
      {
        "text": "arch",
        "type": "variable"
      },
      {
        "text": "os",
        "type": "variable"
      },
      {
        "text": "new",
        "type": "function",
        "snippet": "new(${1:ct}, ${2:[nelem]}, ${3:[init, ...]})"
      },
      {
        "text": "cast",
        "type": "function",
        "snippet": "cast(${1:ct}, ${2:init})"
      },
      {
        "text": "typeof",
        "type": "function",
        "snippet": "typeof(${1:ct})"
      },
      {
        "text": "sizeof",
        "type": "function",
        "snippet": "sizeof(${1:ct}, ${2:[nelem]})"
      },
      {
        "text": "alignof",
        "type": "function",
        "snippet": "alignof(${1:ct})"
      },
      {
        "text": "istype",
        "type": "function",
        "snippet": "istype(${1:ct}, ${2:obj})"
      },
      {
        "text": "fill",
        "type": "function",
        "snippet": "fill(${1:dst}, ${2:len}, ${3:[c]})"
      },
      {
        "text": "cdef",
        "type": "function",
        "snippet": "cdef(${1:def})"
      },
      {
        "text": "abi",
        "type": "function",
        "snippet": "abi(${1:param})"
      },
      {
        "text": "metatype",
        "type": "function",
        "snippet": "metatype(${1:ct}, ${2:metatable})"
      },
      {
        "text": "copy",
        "type": "function",
        "snippet": "copy(${1:dst}, ${2:src}, ${3:[len]})"
      },
      {
        "text": "errno",
        "type": "function",
        "snippet": "errno(${1:[newerr]})"
      },
      {
        "text": "load",
        "type": "function",
        "snippet": "load(${1:name}, ${2:[global]})"
      },
      {
        "text": "string",
        "type": "function",
        "snippet": "string(${1:ptr}, ${2:[len]})"
      },
      {
        "text": "gc",
        "type": "function",
        "snippet": "gc(${1:cdata}, ${2:finalizer})"
      },
      {
        "text": "offsetof",
        "type": "function",
        "snippet": "offsetof(${1:ct}, ${2:field})"
      }
    ]
  },
  "members":
  [
    {
      "text": "close",
      "type": "method",
      "snippet": "close()",
      "rightLabel": "file"
    },
    {
      "text": "flush",
      "type": "method",
      "snippet": "flush()",
      "rightLabel": "file"
    },
    {
      "text": "lines",
      "type": "method",
      "snippet": "lines()",
      "rightLabel": "file"
    },
    {
      "text": "read",
      "type": "method",
      "snippet": "read(${1:...})",
      "rightLabel": "file"
    },
    {
      "text": "write",
      "type": "method",
      "snippet": "write(${1:...})",
      "rightLabel": "file"
    },
    {
      "text": "seek",
      "type": "method",
      "snippet": "seek(${1:[whence]}, ${2:[offset]})",
      "rightLabel": "file"
    },
    {
      "text": "setvbuf",
      "type": "method",
      "snippet": "setvbuf(${1:mode}, ${2:[size]})",
      "rightLabel": "file"
    },
    {
      "text": "find",
      "type": "method",
      "snippet": "find(${1:pattern}, ${2:[init]}, ${3:[plain]})",
      "rightLabel": "string"
    },
    {
      "text": "format",
      "type": "method",
      "snippet": "format(${1:...})",
      "rightLabel": "string"
    },
    {
      "text": "rep",
      "type": "method",
      "snippet": "rep(${1:n}, ${2:[sep]})",
      "rightLabel": "string"
    },
    {
      "text": "gsub",
      "type": "method",
      "snippet": "gsub(${1:pattern}, ${2:repl}, ${3:[n]})",
      "rightLabel": "string"
    },
    {
      "text": "len",
      "type": "method",
      "snippet": "len()",
      "rightLabel": "string"
    },
    {
      "text": "gmatch",
      "type": "method",
      "snippet": "gmatch(${1:pattern})",
      "rightLabel": "string"
    },
    {
      "text": "match",
      "type": "method",
      "snippet": "match(${1:pattern}, ${2:[init]})",
      "rightLabel": "string"
    },
    {
      "text": "reverse",
      "type": "method",
      "snippet": "reverse()",
      "rightLabel": "string"
    },
    {
      "text": "byte",
      "type": "method",
      "snippet": "byte(${1:[i]}, ${2:[j]})",
      "rightLabel": "string"
    },
    {
      "text": "upper",
      "type": "method",
      "snippet": "upper()",
      "rightLabel": "string"
    },
    {
      "text": "lower",
      "type": "method",
      "snippet": "lower()",
      "rightLabel": "string"
    },
    {
      "text": "sub",
      "type": "method",
      "snippet": "sub(${1:i}, ${2:[j]})",
      "rightLabel": "string"
    },
    {
      "text": "resume",
      "type": "method",
      "snippet": "resume(${1:[val1, ...]})",
      "rightLabel": "coroutine"
    },
    {
      "text": "status",
      "type": "method",
      "snippet": "status()",
      "rightLabel": "coroutine"
    }
  ]
}
